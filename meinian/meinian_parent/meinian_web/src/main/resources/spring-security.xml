<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
    <!--一：定义哪些链接可以放行-->
    <!--
      http：用于定义相关权限控制
      指定哪些资源不需要进行权限校验，可以使用通配符
      其中静态资源是不需要验证的
    -->
    <security:http security="none" pattern="/login.html"></security:http>
    <security:http security="none" pattern="/css/**"></security:http>
    <security:http security="none" pattern="/js/**"></security:http>
    <security:http security="none" pattern="/img/**"></security:http>
    <security:http security="none" pattern="/plugins/**"></security:http>
    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled"/>
    <!--
        二：定义哪些链接不可以放行，即需要有角色、权限才可以放行
        http：用于定义相关权限控制
        auto-config：是否自动配置
                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <security:headers>
            <!--            设置在页面可以通过iframe访问受保护的页面,默认为不允许访问-->
            <security:frame-options policy="SAMEORIGIN"/>
        </security:headers>
        <!--只要认证通过就可以访问-->
        <!--
            intercept-url：定义一个拦截规则
            pattern：对哪些url进行权限控制
            access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，
              请求的用户只需拥有其中的一个角色就能成功访问对应的URL
            isAuthenticated()：需要经过认证后才能访问（不是匿名用户）
        -->
        <!--        此配置表示pages下的所有的页面 必须登录后才能访问-->
        <security:intercept-url pattern="/pages/**" access="isAuthenticated()"/>
        <!--
         form-login：定义表单登录信息
            login-page="/login.html"  验证需要转到的页面
            login-processing-url="/login.do" 执行登陆是执行的方法 自动执行 有前段页面的action执行
            username-parameter="username"  登录表单中的用户名的name属性值 ,默认为username
            password-parameter="password"  登录表单中的密码的name属性值 ,默认为password
            default-target-url="/pages/main.html" 登录成功后默认转到的地址
            always-use-default-target="true"       总是使用这个地址
            authentication-failure-url="/login.html" 登录失败转到的地址
       -->
        <security:form-login
                login-page="/login.html"
                login-processing-url="/login.do"
                username-parameter="username"
                password-parameter="password"
                default-target-url="/pages/main.html"
                always-use-default-target="true"
                authentication-failure-url="/login.html"
        />
        <!--
          csrf：对应CsrfFilter过滤器
          disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
        -->
        <security:csrf disabled="true"/>
        <!--
          logout：退出登录
          logout-url：退出登录操作对应的请求路径 /logout.do 是自动执行的
          logout-success-url：退出登录后的跳转页面
        -->
        <security:logout
                logout-url="/logout.do"
                logout-success-url="/login.html"
        />
    </security:http>
    <!--    配置加密所需要要使用的对象,使用spring-security自带的加密对象 BcrptPasswordEncoding-->
    <bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" id="passwordEncoder"/>
    <!--

       三:认证管理:定义登录账号名和密码,并授予访问的权限 或者角色
       authentication-manager：认证管理器，用于处理认证操作
    -->
    <security:authentication-manager>
        <!--
           authentication-provider：认证提供者，执行具体的认证逻辑
       -->
        <security:authentication-provider user-service-ref="springSecurityUserService">
            <!--       指定加密策略     -->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
</beans>